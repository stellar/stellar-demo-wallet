module.exports = {
  extends: ["@stellar/eslint-config"],
  rules: {
    "no-console": "off",
    "import/no-unresolved": "off",
    "react/jsx-filename-extension": ["error", { extensions: [".tsx", ".jsx"] }],
    "react/prop-types": "off",
    // note you must disable the base rule as it can report incorrect errors
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    // note you must disable the base rule as it can report incorrect errors
    "no-unused-vars": "off",
    "no-plusplus": "off",
    "@typescript-eslint/no-unused-vars": ["error"],
    "import/no-extraneous-dependencies": "off",
    "react/jsx-props-no-spreading": "off",
    "valid-jsdoc": "off",
    "import/extensions": "off",
    "import/named": "off",
    "consistent-return": "off",
    "@typescript-eslint/ban-ts-comment": "off",
    "prefer-arrow/prefer-arrow-functions": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/prefer-regexp-exec": "off",
    "jsdoc/check-indentation": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-misused-promises": "off",
    "no-underscore-dangle": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "default",
        format: ["camelCase", "PascalCase"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "variable",
        format: ["camelCase", "UPPER_CASE", "PascalCase"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "enumMember",
        format: ["camelCase", "UPPER_CASE", "PascalCase", "snake_case"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "enum",
        format: ["UPPER_CASE", "PascalCase"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "typeLike",
        format: ["PascalCase"],
      },
      {
        selector: "objectLiteralProperty",
        format: ["PascalCase", "camelCase", "snake_case"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "typeProperty",
        format: ["PascalCase", "UPPER_CASE", "camelCase", "snake_case"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
    ],
  },
};
